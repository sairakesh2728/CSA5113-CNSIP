#include <stdio.h>
int modInverse(int e, int phi) 
{
    int t = 0, newt = 1;
    int r = phi, newr = e;
    while (newr != 0) 
	{
        int quotient = r / newr;
        int temp = newt;
        newt = t - quotient * newt;
        t = temp;
        temp = newr;
        newr = r - quotient * newr;
        r = temp;
    }
    if (r > 1) return -1; 
    if (t < 0) t += phi;
    return t;
}
int main() 
{
    int e = 31;
    int n = 3599;
    int p = 59, q = 61; 
    printf("Found primes p = %d, q = %d\n", p, q);
    int phi = (p - 1) * (q - 1);
    printf("Euler's Totient (phi) = %d\n", phi);
    int d = modInverse(e, phi);
    if (d == -1)
        printf("No modular inverse found!\n");
    else
        printf("Private key d = %d\n", d);

    return 0;
}
